// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package data

import (
	"context"
	"time"
)

const addTransaction = `-- name: AddTransaction :execrows
insert into tm_transaction
  (id, date, description, amount_cents, category_id)
values ($1, $2, $3, $4, $5)
on conflict do nothing
`

type AddTransactionParams struct {
	ID          string
	Date        time.Time
	Description string
	AmountCents int32
	CategoryID  *string
}

func (q *Queries) AddTransaction(ctx context.Context, db DBTX, arg AddTransactionParams) (int64, error) {
	result, err := db.Exec(ctx, addTransaction,
		arg.ID,
		arg.Date,
		arg.Description,
		arg.AmountCents,
		arg.CategoryID,
	)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected(), nil
}

const listTransactions = `-- name: ListTransactions :many
select id, date, description, amount_cents, category_id
from tm_transaction
where date >= $1 and date <= $2
order by date desc
`

type ListTransactionsParams struct {
	Date   time.Time
	Date_2 time.Time
}

func (q *Queries) ListTransactions(ctx context.Context, db DBTX, arg ListTransactionsParams) ([]TmTransaction, error) {
	rows, err := db.Query(ctx, listTransactions, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TmTransaction
	for rows.Next() {
		var i TmTransaction
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Description,
			&i.AmountCents,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const summariseTransactions = `-- name: SummariseTransactions :one
select
  sum(case when amount_cents > 0 then amount_cents else 0 end) as earnings,
  -1 * sum(case when amount_cents < 0 then amount_cents else 0 end) as spendings
from tm_transaction
where date >= $1 and date < $2
`

type SummariseTransactionsParams struct {
	Date   time.Time
	Date_2 time.Time
}

type SummariseTransactionsRow struct {
	Earnings  int64
	Spendings int32
}

func (q *Queries) SummariseTransactions(ctx context.Context, db DBTX, arg SummariseTransactionsParams) (SummariseTransactionsRow, error) {
	row := db.QueryRow(ctx, summariseTransactions, arg.Date, arg.Date_2)
	var i SummariseTransactionsRow
	err := row.Scan(&i.Earnings, &i.Spendings)
	return i, err
}

const summariseTransactionsU100 = `-- name: SummariseTransactionsU100 :one
select
  sum(case when amount_cents > 0 then amount_cents else 0 end) as earnings,
  -1 * sum(case when amount_cents < 0 then amount_cents else 0 end) as spendings
from tm_transaction
where date >= $1 and date < $2 and amount_cents >= -10000
`

type SummariseTransactionsU100Params struct {
	Date   time.Time
	Date_2 time.Time
}

type SummariseTransactionsU100Row struct {
	Earnings  int64
	Spendings int32
}

func (q *Queries) SummariseTransactionsU100(ctx context.Context, db DBTX, arg SummariseTransactionsU100Params) (SummariseTransactionsU100Row, error) {
	row := db.QueryRow(ctx, summariseTransactionsU100, arg.Date, arg.Date_2)
	var i SummariseTransactionsU100Row
	err := row.Scan(&i.Earnings, &i.Spendings)
	return i, err
}

const topEarnings = `-- name: TopEarnings :many
select id, date, description, amount_cents, category_id
from tm_transaction
where date >= $1 and date < $2 and amount_cents > 0
order by amount_cents desc
`

type TopEarningsParams struct {
	Date   time.Time
	Date_2 time.Time
}

func (q *Queries) TopEarnings(ctx context.Context, db DBTX, arg TopEarningsParams) ([]TmTransaction, error) {
	rows, err := db.Query(ctx, topEarnings, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TmTransaction
	for rows.Next() {
		var i TmTransaction
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Description,
			&i.AmountCents,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const topSpendings = `-- name: TopSpendings :many
select id, date, description, amount_cents, category_id
from tm_transaction
where date >= $1 and date < $2 and amount_cents < 0
order by amount_cents asc
`

type TopSpendingsParams struct {
	Date   time.Time
	Date_2 time.Time
}

func (q *Queries) TopSpendings(ctx context.Context, db DBTX, arg TopSpendingsParams) ([]TmTransaction, error) {
	rows, err := db.Query(ctx, topSpendings, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TmTransaction
	for rows.Next() {
		var i TmTransaction
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Description,
			&i.AmountCents,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const topSpendingsU100 = `-- name: TopSpendingsU100 :many
select id, date, description, amount_cents, category_id
from tm_transaction
where date >= $1 and date < $2 and amount_cents < 0 and amount_cents >= -10000
order by amount_cents asc
`

type TopSpendingsU100Params struct {
	Date   time.Time
	Date_2 time.Time
}

func (q *Queries) TopSpendingsU100(ctx context.Context, db DBTX, arg TopSpendingsU100Params) ([]TmTransaction, error) {
	rows, err := db.Query(ctx, topSpendingsU100, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []TmTransaction
	for rows.Next() {
		var i TmTransaction
		if err := rows.Scan(
			&i.ID,
			&i.Date,
			&i.Description,
			&i.AmountCents,
			&i.CategoryID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const yearlyTimeline = `-- name: YearlyTimeline :many
select
  date_trunc('month', date)::date as month,
  sum(case when amount_cents > 0 then amount_cents else 0 end)::int as earnings,
  (-1 * sum(case when amount_cents < 0 then amount_cents else 0 end))::int as spendings
from tm_transaction
where date >= $1 and date < $2
group by month
order by month asc
`

type YearlyTimelineParams struct {
	Date   time.Time
	Date_2 time.Time
}

type YearlyTimelineRow struct {
	Month     time.Time
	Earnings  int32
	Spendings int32
}

func (q *Queries) YearlyTimeline(ctx context.Context, db DBTX, arg YearlyTimelineParams) ([]YearlyTimelineRow, error) {
	rows, err := db.Query(ctx, yearlyTimeline, arg.Date, arg.Date_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []YearlyTimelineRow
	for rows.Next() {
		var i YearlyTimelineRow
		if err := rows.Scan(&i.Month, &i.Earnings, &i.Spendings); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
